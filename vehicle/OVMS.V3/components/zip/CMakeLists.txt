set(srcs)
set(include_dirs)

if (CONFIG_OVMS_SC_ZIP)
  list(APPEND srcs "src/zip_archive.cpp" "zlib/adler32.c" "zlib/compress.c" "zlib/crc32.c" "zlib/deflate.c" "zlib/gzclose.c" "zlib/gzlib.c" "zlib/gzread.c" "zlib/gzwrite.c" "zlib/infback.c" "zlib/inffast.c" "zlib/inflate.c" "zlib/inftrees.c" "zlib/trees.c" "zlib/uncompr.c" "zlib/zutil.c" "libzip/lib/zip_add.c" "libzip/lib/zip_add_dir.c" "libzip/lib/zip_add_entry.c" "libzip/lib/zip_algorithm_deflate.c" "libzip/lib/zip_buffer.c" "libzip/lib/zip_close.c" "libzip/lib/zip_crypto_mbedtls.c" "libzip/lib/zip_delete.c" "libzip/lib/zip_dir_add.c" "libzip/lib/zip_dirent.c" "libzip/lib/zip_discard.c" "libzip/lib/zip_entry.c" "libzip/lib/zip_err_str.c" "libzip/lib/zip_error.c" "libzip/lib/zip_error_clear.c" "libzip/lib/zip_error_get.c" "libzip/lib/zip_error_get_sys_type.c" "libzip/lib/zip_error_strerror.c" "libzip/lib/zip_error_to_str.c" "libzip/lib/zip_extra_field.c" "libzip/lib/zip_extra_field_api.c" "libzip/lib/zip_fclose.c" "libzip/lib/zip_fdopen.c" "libzip/lib/zip_file_add.c" "libzip/lib/zip_file_error_clear.c" "libzip/lib/zip_file_error_get.c" "libzip/lib/zip_file_get_comment.c" "libzip/lib/zip_file_get_external_attributes.c" "libzip/lib/zip_file_get_offset.c" "libzip/lib/zip_file_rename.c" "libzip/lib/zip_file_replace.c" "libzip/lib/zip_file_set_comment.c" "libzip/lib/zip_file_set_encryption.c" "libzip/lib/zip_file_set_external_attributes.c" "libzip/lib/zip_file_set_mtime.c" "libzip/lib/zip_file_strerror.c" "libzip/lib/zip_filerange_crc.c" "libzip/lib/zip_fopen.c" "libzip/lib/zip_fopen_encrypted.c" "libzip/lib/zip_fopen_index.c" "libzip/lib/zip_fopen_index_encrypted.c" "libzip/lib/zip_fread.c" "libzip/lib/zip_fseek.c" "libzip/lib/zip_ftell.c" "libzip/lib/zip_get_archive_comment.c" "libzip/lib/zip_get_archive_flag.c" "libzip/lib/zip_get_encryption_implementation.c" "libzip/lib/zip_get_file_comment.c" "libzip/lib/zip_get_name.c" "libzip/lib/zip_get_num_entries.c" "libzip/lib/zip_get_num_files.c" "libzip/lib/zip_hash.c" "libzip/lib/zip_io_util.c" "libzip/lib/zip_libzip_version.c" "libzip/lib/zip_memdup.c" "libzip/lib/zip_name_locate.c" "libzip/lib/zip_new.c" "libzip/lib/zip_open.c" "libzip/lib/zip_progress.c" "libzip/lib/zip_rename.c" "libzip/lib/zip_replace.c" "libzip/lib/zip_set_archive_comment.c" "libzip/lib/zip_set_archive_flag.c" "libzip/lib/zip_set_default_password.c" "libzip/lib/zip_set_file_comment.c" "libzip/lib/zip_set_file_compression.c" "libzip/lib/zip_set_name.c" "libzip/lib/zip_source_begin_write.c" "libzip/lib/zip_source_begin_write_cloning.c" "libzip/lib/zip_source_buffer.c" "libzip/lib/zip_source_call.c" "libzip/lib/zip_source_close.c" "libzip/lib/zip_source_commit_write.c" "libzip/lib/zip_source_compress.c" "libzip/lib/zip_source_crc.c" "libzip/lib/zip_source_error.c" "libzip/lib/zip_source_file.c" "libzip/lib/zip_source_filep.c" "libzip/lib/zip_source_free.c" "libzip/lib/zip_source_function.c" "libzip/lib/zip_source_get_compression_flags.c" "libzip/lib/zip_source_is_deleted.c" "libzip/lib/zip_source_layered.c" "libzip/lib/zip_source_open.c" "libzip/lib/zip_source_pkware.c" "libzip/lib/zip_source_read.c" "libzip/lib/zip_source_remove.c" "libzip/lib/zip_source_rollback_write.c" "libzip/lib/zip_source_seek.c" "libzip/lib/zip_source_seek_write.c" "libzip/lib/zip_source_stat.c" "libzip/lib/zip_source_supports.c" "libzip/lib/zip_source_tell.c" "libzip/lib/zip_source_tell_write.c" "libzip/lib/zip_source_window.c" "libzip/lib/zip_source_winzip_aes_decode.c" "libzip/lib/zip_source_winzip_aes_encode.c" "libzip/lib/zip_source_write.c" "libzip/lib/zip_source_zip.c" "libzip/lib/zip_source_zip_new.c" "libzip/lib/zip_stat.c" "libzip/lib/zip_stat_index.c" "libzip/lib/zip_stat_init.c" "libzip/lib/zip_strerror.c" "libzip/lib/zip_string.c" "libzip/lib/zip_unchange.c" "libzip/lib/zip_unchange_all.c" "libzip/lib/zip_unchange_archive.c" "libzip/lib/zip_unchange_data.c" "libzip/lib/zip_utf-8.c" "libzip/lib/zip_winzip_aes.c")
  list(APPEND include_dirs "include" "zlib" "libzip/lib")
endif ()

# requirements can't depend on config
idf_component_register(SRCS ${srcs}
                       INCLUDE_DIRS ${include_dirs}
                       PRIV_REQUIRES "main"
                       WHOLE_ARCHIVE)

if (CONFIG_OVMS_SC_ZIP)
  component_compile_definitions(HAVE_CONFIG_H)
  component_compile_options("-Wno-pointer-sign" "-Wno-implicit-function-declaration" "-Wno-maybe-uninitialized" "-Wno-unused-but-set-variable" "-Wstack-usage=512")
endif ()
